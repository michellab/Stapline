


from typing import  List

import pathlib
import logging
from pydantic import Field  # , validator, root_validator






def manage_external_output(self, qcmols: List[qcel.models.Molecule],
                               working_directory: Union[str, pathlib.Path] = ".",
                               **kwargs) -> List[Any]:
        results = []
        to_execute = []
        errors = []
        for qcmol in qcmols:
            try:
                result, path = self.read_output(qcmol,
                                                working_directory=working_directory,
                                                return_path=True)
            except (FileNotFoundError, ValidationError):
                path = self.write_input(qcmol, working_directory, **kwargs)
                to_execute.append(path)
            else:
                if not result.success:
                    error_data = result.error
                    if error_data:
                        error_data = result.dict()["error"]
                        error_message = error_data.get("error_message", error_data)
                        error_type = error_data.get("error_type", "Nonspecific")
                        errors.append(f"{error_type} error for {path}: {error_message}")
                    else:
                        to_execute.append(path)
                else:
                    results.append(result)
        if to_execute:
            logger.debug(f"{len(to_execute)} calculations remaining")
            lines = ["#!/usr/bin/env bash"] + [f"psi4 --qcschema {path.name}" for path in to_execute]
            runfile = self.get_run_file(working_directory)
            with runfile.open("w") as f:
                f.write("\n".join(lines))
            logger.debug(f"Wrote to {runfile}")

        if errors:
            raise ValueError(f"Found {len(errors)} errors", *errors)

        if to_execute:
            raise SystemExit("Exiting to allow running QM computations; "
                             f"commands are in {runfile}")
        return results


def write_input(self, qcmol: qcel.models.Molecule,
                    working_directory: Union[str, pathlib.Path] = ".",
                    **kwargs) -> pathlib.Path:
        """Write a Psi4 input file.

        Parameters
        ----------
        qcmol: qcelemental.models.Molecule
            QCElemental molecule
        working_directory: Union[str, pathlib.Path]
            Directory to save input files within

        Returns
        -------
        pathlib.Path
            The path of the input file
        """
        infile = self.get_job_file_for_molecule(qcmol,
                                                working_directory=working_directory,
                                                make_directory=True)
        spec = dict(
            model=dict(method=self.method,
                       basis=self.basis),
            driver=self.driver,
            keywords=self.generate_keywords(),
            protocols=self.protocols,
            molecule=qcmol,
        )
        spec.update(kwargs)

        compute = qcel.models.AtomicInput(**spec)
        with infile.open("wb") as f:
            f.write(compute.serialize("msgpack-ext"))
        logger.debug(f"Wrote to {infile}")
        return infile